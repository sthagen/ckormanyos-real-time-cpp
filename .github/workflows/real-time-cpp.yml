##############################################################################
#  Copyright Christopher Kormanyos 2021 - 2022.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)

name: real-time-cpp
on:
  push:
    branches:
      - '**'
  pull_request:
  schedule:
    - cron: '45 23 * * *' # run at 11:45 PM UTC
jobs:
  gnumake-clang-tidy-native:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14 ]
        compiler: [ g++, clang++ ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install clang clang-tidy
      - name: gnumake-clang-tidy-native
        run: |
          cd .tidy/make
          echo "running clang-tidy"
          echo "make prepare -f make_tidy_01_generic.gmk MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}"
          echo
          make prepare -f make_tidy_01_generic.gmk MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}
          echo "make tidy -f make_tidy_01_generic.gmk --jobs=8 MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}"
          make tidy -f make_tidy_01_generic.gmk --jobs=8 MY_CC=${{ matrix.compiler }} MY_STD=${{ matrix.standard }}
          echo
          echo "verify empty word count of ./tmp/all.tidy_txt"
          wc ./tmp/all.tidy_txt | grep '0 0 0'
  target-avr:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        suite: [ avr, atmega2560 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: target-avr-${{ matrix.suite }}
        run: |
          ./target/build/build.sh ${{ matrix.suite }} rebuild
          ls -la ./bin/ref_app.hex ./bin/ref_app.s19 ./bin/ref_app.map
        working-directory: ./ref_app/
  target-avr-cmake:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        suite: [ avr, atmega2560 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: target-avr-cmake-${{ matrix.suite }}
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=avr -DTARGET=${{ matrix.suite }} -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls -la ref_app.hex ref_app.s19 ref_app.map
        working-directory: ./
  target-avr-example_led:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter02_02, chapter02_06 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: target-avr-example_led
        run: |
          cd ${{ matrix.example }}
          ./build.sh /usr/bin avr
          ls -la ./bin/led.elf ./bin/led.map ./bin/led.hex
        working-directory: ./examples/
        shell: bash
  target-avr-examples:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter02_03, chapter02_03a, chapter03_02, chapter04_04, chapter04_04a, chapter06_01, chapter06_14, chapter09_07, chapter09_08, chapter10_08, chapter10_08a, chapter11_07, chapter12_04, chapter16_08, chapter17_03, chapter17_03a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: target-avr-examples
        run: |
          cd ${{ matrix.example }}
          ./build.sh /usr/bin avr
          ls -la ./bin/${{ matrix.example }}.elf ./bin/${{ matrix.example }}.map ./bin/${{ matrix.example }}.hex
        working-directory: ./examples/
  target-bcm2835_raspi_b-example10_09:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter10_09 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: target-bcm2835_raspi_b-example10_09
        run: |
          cd ${{ matrix.example }}
          ./build.sh /usr/bin arm-none-eabi
          ls -la ./bin/${{ matrix.example }}.elf ./bin/${{ matrix.example }}.map ./bin/${{ matrix.example }}.hex ./bin/kernel.img
        working-directory: ./examples/
  target-msvc-examples:
    runs-on: windows-2019
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter02_03, chapter02_03a, chapter03_02, chapter04_04, chapter04_04a, chapter06_01, chapter06_14, chapter09_07, chapter09_08, chapter10_08, chapter10_08a, chapter10_09, chapter11_07, chapter12_04, chapter17_03, chapter17_03a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: target-msvc-examples
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          cd ${{ matrix.example }}
          MSBuild -m ${{ matrix.example }}.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/${{ matrix.example }}.exe
        working-directory: ./examples/
  target-msvc-example16_08:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter16_08 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.bat
          ./b2 headers
      - uses: actions/checkout@v1
      - uses: ilammy/msvc-dev-cmd@v1
      - name: target-msvc-example16_08
        shell: cmd
        working-directory: ./
        run: |
          cd examples/${{ matrix.example }}
          set INCLUDE=%cd%\src\mcal\win32;%cd%\src;%cd%\..\..\..\boost-root;%INCLUDE%
          MSBuild -m ${{ matrix.example }}.sln -p:useenv=true -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir .\Release\${{ matrix.example }}.exe
  target-avr-win-batch-example_led:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter02_02, chapter02_06 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\examples\${{ matrix.example }}\tools
          cd .\examples\${{ matrix.example }}\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-avr.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-avr"
        working-directory: ./
      - name: target-avr-win-batch-example_led
        run: |
          cd ${{ matrix.example }}
          .\build.bat ".\tools\Util\msys64\usr\local\gcc-11.2.0-avr\bin" avr
        working-directory: ./examples/
  target-avr-win-batch-examples:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter02_03, chapter02_03a, chapter03_02, chapter04_04, chapter04_04a, chapter06_01, chapter06_14, chapter09_07, chapter09_08, chapter10_08, chapter10_08a, chapter11_07, chapter12_04, chapter17_03, chapter17_03a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\examples\${{ matrix.example }}\tools
          cd .\examples\${{ matrix.example }}\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-avr.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-avr"
        working-directory: ./
      - name: target-avr-win-batch-examples
        run: |
          cd ${{ matrix.example }}
          .\build.bat ".\tools\Util\msys64\usr\local\gcc-11.2.0-avr\bin" avr
        working-directory: ./examples/
  target-arm-win-batch-examples:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        example: [ chapter10_09 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\examples\${{ matrix.example }}\tools
          cd .\examples\${{ matrix.example }}\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-arm-none-eabi.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-arm-none-eabi"
        working-directory: ./
      - name: target-arm-win-batch-examples
        run: |
          cd ${{ matrix.example }}
          .\build.bat ".\tools\Util\msys64\usr\local\gcc-11.2.0-arm-none-eabi\bin" arm-none-eabi
        working-directory: ./examples/
  target-arm:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        suite: [ am335x, bcm2835_raspi_b, lpc11c24, stm32f100, stm32f407, stm32f429, stm32f446, stm32l100c, stm32l152 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: target-arm-${{ matrix.suite }}
        run: |
          ./target/build/build.sh ${{ matrix.suite }} rebuild
          ls -la ./bin/ref_app.hex ./bin/ref_app.s19 ./bin/ref_app.map
        working-directory: ./ref_app/
  target-arm-cmake:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        suite: [ am335x, bcm2835_raspi_b, lpc11c24, stm32f100, stm32f407, stm32f429, stm32f446, stm32l100c, stm32l152 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: target-arm-cmake-${{ matrix.suite }}
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=${{ matrix.suite }} -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls -la ref_app.hex ref_app.s19 ref_app.map
        working-directory: ./
  target-x86_64:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: build-target-x86_64-w64-mingw32
        run: |
          ./target/build/build.sh x86_64-w64-mingw32 rebuild
          ls ./bin/ref_app.exe
        working-directory: ./ref_app/
        shell: bash
  target-host-cmake:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: build-target-host
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTARGET=host -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.exe ref_app.map
        working-directory: ./
        shell: bash
  msvc-msbuild:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ Debug, Release ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration=${{ matrix.suite }} -p:Platform=x64 /t:Rebuild
          dir .\tmp\${{ matrix.suite }}\ref_app.exe
        working-directory: ./ref_app/
  msvc-msbuild-avr:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ avr, atmega2560, atmega4809 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\ref_app\tools
          cd .\ref_app\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-avr.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-avr"
        working-directory: ./
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration="target ${{ matrix.suite }}" -p:Platform=x64 /t:Rebuild
          dir .\bin\ref_app.elf .\bin\ref_app.hex .\bin\ref_app.s19
        working-directory: ./ref_app/
  msvc-msbuild-arm:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ am335x, bcm2835_raspi_b, lpc11c24, stm32f100, stm32f407, stm32f429, stm32f446, stm32l100c, stm32l152 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\ref_app\tools
          cd .\ref_app\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-arm-none-eabi.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-arm-none-eabi-avr"
        working-directory: ./
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration="target ${{ matrix.suite }}" -p:Platform=x64 /t:Rebuild
          dir .\bin\ref_app.elf .\bin\ref_app.hex .\bin\ref_app.s19
        working-directory: ./ref_app/
  msvc-msbuild-rl78:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ rl78 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\ref_app\tools
          cd .\ref_app\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-rl78-unknown-elf.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-rl78-unknown-elf"
        working-directory: ./
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration="target ${{ matrix.suite }}" -p:Platform=x64 /t:Rebuild
          dir .\bin\ref_app.elf .\bin\ref_app.hex .\bin\ref_app.s19
        working-directory: ./ref_app/
  msvc-msbuild-rx63n:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ rx63n ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\ref_app\tools
          cd .\ref_app\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-rx-elf.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-rx-elf"
        working-directory: ./
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration="target ${{ matrix.suite }}" -p:Platform=x64 /t:Rebuild
          dir .\bin\ref_app.elf .\bin\ref_app.hex .\bin\ref_app.s19
        working-directory: ./ref_app/
  msvc-msbuild-v850:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ v850es_fx2 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\ref_app\tools
          cd .\ref_app\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-v850-unknown-elf.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-v850-unknown-elf"
        working-directory: ./
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration="target ${{ matrix.suite }}" -p:Platform=x64 /t:Rebuild
          dir .\bin\ref_app.elf .\bin\ref_app.hex .\bin\ref_app.s19
        working-directory: ./ref_app/
  msvc-msbuild-x86_64-w64-mingw32:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ x86_64-w64-mingw32 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\ref_app\tools
          cd .\ref_app\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-11.2.0-x86_64-w64-mingw32.exe -y -gm2 -InstallPath=".\\gcc-11.2.0-x86_64-w64-mingw32"
        working-directory: ./
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration="target ${{ matrix.suite }}" -p:Platform=x64 /t:Rebuild
          dir .\bin\ref_app.exe
        working-directory: ./ref_app/
  msvc-msbuild-xtensa:
    runs-on: windows-2019
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        suite: [ xtensa32 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-real-time-cpp-toolchains-master
        run: |
          echo Cloning GNU/GCC toolchain
          git clone -b master --depth 1 https://github.com/ckormanyos/real-time-cpp-toolchains.git ../toolchains
        working-directory: ./
      - name: extract-real-time-cpp-toolchain
        run: |
          echo Moving GNU/GCC toolchain
          move ..\toolchains\ref_app\tools .\ref_app\tools
          cd .\ref_app\tools\Util\msys64\usr\local
          dir
          echo Extracting GNU/GCC toolchain
          start /b /wait ./gcc-8.4.0-xtensa-esp32-elf.exe -y -gm2 -InstallPath=".\\gcc-8.4.0-xtensa-esp32-elf"
        working-directory: ./
      - name: msvc-msbuild-${{ matrix.suite }}
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration="target ${{ matrix.suite }}" -p:Platform=x64 /t:Rebuild
          dir .\bin\ref_app.elf .\bin\ref_app.hex .\bin\ref_app.s19
        working-directory: ./ref_app/
  benchmark_gcc-clang:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        standard: [ c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install clang
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
        working-directory: ./
      - name: benchmark_gcc-clang
        run: ./target/build/test_app_benchmarks.sh ${{ matrix.compiler }} ${{ matrix.standard }}
        working-directory: ./ref_app/
  benchmark_gcc-clang-8-9:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++-8, g++-9, clang++-8, clang++-9 ]
        standard: [ c++14, c++17 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-8 g++-9 clang-8 clang-9
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
        working-directory: ./
      - name: benchmark_gcc-clang-8-9
        run: ./target/build/test_app_benchmarks.sh ${{ matrix.compiler }} ${{ matrix.standard }}
        working-directory: ./ref_app/
  benchmark_gcc-clang-10:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++-10, clang++-10 ]
        standard: [ c++14, c++17, c++20 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-10 clang-10
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
        working-directory: ./
      - name: benchmark_gcc-clang-10
        run: ./target/build/test_app_benchmarks.sh ${{ matrix.compiler }} ${{ matrix.standard }}
        working-directory: ./ref_app/
  benchmark_apple-clang:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++, clang++ ]
        standard: [ c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
        working-directory: ./
      - name: benchmark_apple-clang
        run: ./target/build/test_app_benchmarks.sh ${{ matrix.compiler }} ${{ matrix.standard }}
        working-directory: ./ref_app/
  benchmark_builds-avr:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: benchmark_builds-avr
        run: ./target/build/test_app_benchmarks_avr.sh ${{ matrix.standard }}
        working-directory: ./ref_app/
  benchmark_builds-stm32f446:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        standard: [ c++14, c++17, c++2a ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: clone-submods-bootstrap-headers-boost-develop
        run: |
          git clone -b develop --depth 1 https://github.com/boostorg/boost.git ../boost-root
          cd ../boost-root
          git submodule update --init tools
          git submodule update --init libs/config
          git submodule update --init libs/math
          git submodule update --init libs/multiprecision
          ./bootstrap.sh
          ./b2 headers
        working-directory: ./
      - name: benchmark_builds-stm32f446
        run: ./target/build/test_app_benchmarks_stm32f446.sh ${{ matrix.standard }}
        working-directory: ./ref_app/
  benchmark_single-stm32f446:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: benchmark_single-stm32f446
        run: |
          mkdir -p bin
          arm-none-eabi-g++ -std=c++14 -Wall -Wextra -pedantic -O2 -g -gdwarf-2 -ffunction-sections -fdata-sections -x c++ -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-nonansi-builtins -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -mcpu=cortex-m4 -mtune=cortex-m4 -mthumb -mfloat-abi=soft -mno-unaligned-access -mno-long-calls -I./src/mcal/stm32f446 -I./src -DAPP_BENCHMARK_TYPE=APP_BENCHMARK_TYPE_CRC -DAPP_BENCHMARK_STANDALONE_MAIN ./src/app/benchmark/app_benchmark_crc.cpp ./target/micros/stm32f446/make/single/crt.cpp -nostartfiles -Wl,--gc-sections -Wl,-Map,./bin/app_benchmark_crc.map -T ./target/micros/stm32f446/make/stm32f446.ld -o ./bin/app_benchmark_crc.elf
          arm-none-eabi-objcopy ./bin/app_benchmark_crc.elf -O ihex ./bin/app_benchmark_crc.hex
          ls -la ./bin/app_benchmark_crc.elf ./bin/app_benchmark_crc.hex ./bin/app_benchmark_crc.map
        working-directory: ./ref_app/
  benchmark_single-cnl:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        compiler: [ g++-10, clang++-10 ]
        standard: [ c++20 ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install g++-10 clang-10
      - name: benchmark_single-cnl
        run: |
          git clone -b main --depth 1 https://github.com/johnmcfarlane/cnl.git ../cnl-root
          mkdir -p bin
          ${{ matrix.compiler }} -std=${{ matrix.standard }} -Wall -Werror -O3 -march=native -fsanitize=address -I./src -I../cnl-root/include -DAPP_BENCHMARK_TYPE=APP_BENCHMARK_TYPE_CNL_SCALED_INTEGER -DAPP_BENCHMARK_STANDALONE_MAIN ./src/app/benchmark/app_benchmark_cnl_scaled_integer.cpp -o ./bin/app_benchmark_cnl_scaled_integer.exe
          ls -la ./bin/app_benchmark_cnl_scaled_integer.exe
          ./bin/app_benchmark_cnl_scaled_integer.exe
        working-directory: ./ref_app/
  benchmark_single-stm32f429-qemu-cnl:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: wget-gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux
        run: |
          mkdir -p emu_env && cd emu_env
          wget --no-check-certificate https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          tar -xf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
        working-directory: ./ref_app/
      - name: benchmark_single-stm32f429-qemu-cnl
        run: |
          git clone -b main --depth 1 https://github.com/johnmcfarlane/cnl.git ../cnl-root
          mkdir -p bin
          ./emu_env/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-g++ -std=c++20 -Wall -Wextra -pedantic -O2 -g -gdwarf-2 -ffunction-sections -fdata-sections -x c++ -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-nonansi-builtins -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=128 -mcpu=cortex-m4 -mtune=cortex-m4 -mthumb -mfloat-abi=soft -mno-unaligned-access -mno-long-calls -I./src/mcal/stm32f429 -I./src -I../cnl-root/include -DAPP_BENCHMARK_TYPE=APP_BENCHMARK_TYPE_CNL_SCALED_INTEGER -DAPP_BENCHMARK_STANDALONE_MAIN ./src/app/benchmark/app_benchmark_cnl_scaled_integer.cpp ./target/micros/stm32f429/make/single/crt.cpp -nostartfiles -Wl,--gc-sections -Wl,-Map,./bin/app_benchmark_cnl_scaled_integer.map -T ./target/micros/stm32f429/make/stm32f429.ld -o ./bin/app_benchmark_cnl_scaled_integer.elf
          ./emu_env/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-objcopy ./bin/app_benchmark_cnl_scaled_integer.elf -O ihex ./bin/app_benchmark_cnl_scaled_integer.hex
          ls -la ./bin/app_benchmark_cnl_scaled_integer.elf ./bin/app_benchmark_cnl_scaled_integer.hex ./bin/app_benchmark_cnl_scaled_integer.map
        working-directory: ./ref_app/
  benchmark_single-stm32f429-qemu:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: |
          sudo apt install libncurses5 libpython2.7
          mkdir -p emu_env && cd emu_env
          wget --no-check-certificate https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          tar -xf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          wget --no-check-certificate https://github.com/xpack-dev-tools/qemu-arm-xpack/releases/download/v2.8.0-7/xpack-qemu-arm-2.8.0-7-linux-x64.tgz
          tar xvf xpack-qemu-arm-2.8.0-7-linux-x64.tgz
        working-directory: ./ref_app/
      - name: build benchmark_single-stm32f429
        run: |
          mkdir -p bin
          emu_env/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-g++ -std=c++14 -Wall -Wextra -pedantic -O0 -g -gdwarf-2 -ffunction-sections -fdata-sections -x c++ -fno-rtti -fno-use-cxa-atexit -fno-exceptions -fno-nonansi-builtins -fno-threadsafe-statics -fno-enforce-eh-specs -ftemplate-depth=32 -mcpu=cortex-m4 -mtune=cortex-m4 -mthumb -mfloat-abi=soft -mno-unaligned-access -mno-long-calls -I./src/mcal/stm32f429 -I./src -DAPP_BENCHMARK_TYPE=APP_BENCHMARK_TYPE_CRC -DAPP_BENCHMARK_STANDALONE_MAIN ./src/app/benchmark/app_benchmark_crc.cpp ./target/micros/stm32f429/make/single/crt.cpp -nostartfiles -Wl,--gc-sections -Wl,-Map,./bin/app_benchmark_crc.map -T ./target/micros/stm32f429/make/stm32f429.ld -o ./bin/app_benchmark_crc.elf
          emu_env/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-objcopy ./bin/app_benchmark_crc.elf -O ihex ./bin/app_benchmark_crc.hex
          ls -la ./bin/app_benchmark_crc.elf ./bin/app_benchmark_crc.hex ./bin/app_benchmark_crc.map
        working-directory: ./ref_app/
      - name: emulate-target stm32f429
        run: |
          ./emu_env/xPacks/qemu-arm/2.8.0-7/bin/qemu-system-gnuarmeclipse --verbose --mcu STM32F429ZI --nographic --gdb tcp::9999 -d unimp,guest_errors &
        working-directory: ./ref_app/
      - name: run-test-on-target
        run: |
          ./emu_env/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gdb-py ./bin/app_benchmark_crc.elf -x ./target/build/test_app_benchmarks_emulator.py > arm-none-eabi-gdb-py.txt
          cat arm-none-eabi-gdb-py.txt
          sed -n l arm-none-eabi-gdb-py.txt | grep 4027435774
        working-directory: ./ref_app/
