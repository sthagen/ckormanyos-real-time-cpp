##############################################################################
#  Copyright Christopher Kormanyos 2021.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)

name: real-time-cpp
on: [push,pull_request]
jobs:
  target-am335x:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-am335x
        run: |
          ./target/build/build.sh am335x rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-avr:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: build-target-avr
        run: |
          ./target/build/build.sh avr rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-avr-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: build-target-avr
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=avr -DTARGET=avr -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-avr-examples:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-avr avr-libc
      - name: build-avr-examples
        run: |
          cd chapter02_02
          ./build.sh /usr/bin avr
          ls ./bin/led.elf ./bin/led.map ./bin/led.hex
          cd ../chapter02_03
          ./build.sh /usr/bin avr
          ls ./bin/chapter02_03.elf ./bin/chapter02_03.map ./bin/chapter02_03.hex
          cd ../chapter02_03a
          ./build.sh /usr/bin avr
          ls ./bin/chapter02_03a.elf ./bin/chapter02_03a.map ./bin/chapter02_03a.hex
          cd ../chapter02_06
          ./build.sh /usr/bin avr
          ls ./bin/led.elf ./bin/led.map ./bin/led.hex
          cd ../chapter03_02
          ./build.sh /usr/bin avr
          ls ./bin/chapter03_02.elf ./bin/chapter03_02.map ./bin/chapter03_02.hex
          cd ../chapter04_04
          ./build.sh /usr/bin avr
          ls ./bin/chapter04_04.elf ./bin/chapter04_04.map ./bin/chapter04_04.hex
          cd ../chapter04_04a
          ./build.sh /usr/bin avr
          ls ./bin/chapter04_04a.elf ./bin/chapter04_04a.map ./bin/chapter04_04a.hex
          cd ../chapter06_01
          ./build.sh /usr/bin avr
          ls ./bin/chapter06_01.elf ./bin/chapter06_01.map ./bin/chapter06_01.hex
          cd ../chapter06_14
          ./build.sh /usr/bin avr
          ls ./bin/chapter06_14.elf ./bin/chapter06_14.map ./bin/chapter06_14.hex
          cd ../chapter09_07
          ./build.sh /usr/bin avr
          ls ./bin/chapter09_07.elf ./bin/chapter09_07.map ./bin/chapter09_07.hex
          cd ../chapter09_08
          ./build.sh /usr/bin avr
          ls ./bin/chapter09_08.elf ./bin/chapter09_08.map ./bin/chapter09_08.hex
          cd ../chapter12_04
          ./build.sh /usr/bin avr
          ls ./bin/chapter12_04.elf ./bin/chapter12_04.map ./bin/chapter12_04.hex
          cd ../chapter17_03
          ./build.sh /usr/bin avr
          ls ./bin/chapter17_03.elf ./bin/chapter17_03.map ./bin/chapter17_03.hex
          cd ../chapter17_03a
          ./build.sh /usr/bin avr
          ls ./bin/chapter17_03a.elf ./bin/chapter17_03a.map ./bin/chapter17_03a.hex
        working-directory: ./examples/
        shell: bash
  target-msvc-examples:
    runs-on: windows-latest
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: target-msvc-examples
        shell: pwsh
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          cd chapter02_03
          MSBuild -m chapter02_03.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter02_03.exe
          cd ../chapter02_03a
          MSBuild -m chapter02_03a.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter02_03a.exe
          cd ../chapter04_04
          MSBuild -m chapter04_04.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter04_04.exe
          cd ../chapter03_02
          MSBuild -m chapter03_02.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter03_02.exe
          cd ../chapter04_04a
          MSBuild -m chapter04_04a.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter04_04a.exe
          cd ../chapter06_01
          MSBuild -m chapter06_01.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter06_01.exe
          cd ../chapter06_14
          MSBuild -m chapter06_14.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter06_14.exe
          cd ../chapter09_08
          MSBuild -m chapter09_08.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter09_08.exe
          cd ../chapter12_04
          MSBuild -m chapter12_04.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter12_04.exe
          cd ../chapter17_03
          MSBuild -m chapter17_03.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter17_03.exe
          cd ../chapter17_03a
          MSBuild -m chapter17_03a.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./Release/chapter17_03a.exe
        working-directory: ./examples/
  target-bcm2835_raspi_b:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-bcm2835_raspi_b
        run: |
          ./target/build/build.sh bcm2835_raspi_b rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map ./bin/kernel.img
        working-directory: ./ref_app/
        shell: bash
  target-bcm2835_raspi_b-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-bcm2835_raspi_b
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=bcm2835_raspi_b -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-lpc11c24:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-lpc11c24
        run: |
          ./target/build/build.sh lpc11c24 rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-lpc11c24-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-lpc11c24
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=lpc11c24 -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-stm32f100:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f100
        run: |
          ./target/build/build.sh stm32f100 rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-stm32f100-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f100
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=stm32f100 -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-stm32f407:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f407
        run: |
          ./target/build/build.sh stm32f407 rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-stm32f407-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f407
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=stm32f407 -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-stm32f429:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f429
        run: |
          ./target/build/build.sh stm32f429 rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-stm32f429-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f429
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=stm32f429 -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-stm32f446:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f446
        run: |
          ./target/build/build.sh stm32f446 rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-stm32f446-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32f446
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=stm32f446 -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-stm32l100c:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32l100c
        run: |
          ./target/build/build.sh stm32l100c rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-stm32l100c-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32l100c
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=stm32l100c -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-stm32l152:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32l152
        run: |
          ./target/build/build.sh stm32l152 rebuild
          ls ./bin/ref_app.hex ./bin/ref_app.map
        working-directory: ./ref_app/
        shell: bash
  target-stm32l152-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-arm-none-eabi
      - name: build-target-stm32l152
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTRIPLE=arm-none-eabi -DTARGET=stm32l152 -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.hex
        working-directory: ./
        shell: bash
  target-x86_64:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: build-target-x86_64-w64-mingw32
        run: |
          ./target/build/build.sh x86_64-w64-mingw32 rebuild
          ls ./bin/ref_app.exe
        working-directory: ./ref_app/
        shell: bash
  target-host-cmake:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: build-target-host
        run: |
          mkdir build
          cd build
          cmake ../ref_app -DTARGET=host -DCMAKE_TOOLCHAIN_FILE=../ref_app/cmake/gcc-toolchain.cmake
          make -j ref_app
          ls ref_app.exe ref_app.map
        working-directory: ./
        shell: bash
  msvc-release:
    runs-on: windows-latest
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: build-msvc-release
        shell: pwsh
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration=Release -p:Platform=x64 /t:Rebuild
          dir ./tmp/Release/ref_app.exe
        working-directory: ./ref_app/
  msvc-debug:
    runs-on: windows-latest
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: build-msvc-debug
        shell: pwsh
        env:
          PATH: '${env:PATH};C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64'
        run: |
          MSBuild -m ref_app.sln -p:Configuration=Debug -p:Platform=x64 /t:Rebuild
          dir ./tmp/Debug/ref_app.exe
        working-directory: ./ref_app/
  benchmark_tests-gcc:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install gcc-8 gcc-9 gcc-10
      - name: benchmark_tests_gcc
        run: |
            ./target/build/test_app_benchmarks.sh g++ c++11
            ./target/build/test_app_benchmarks.sh g++-8 c++11
            ./target/build/test_app_benchmarks.sh g++-8 c++14
            ./target/build/test_app_benchmarks.sh g++-8 c++17
            ./target/build/test_app_benchmarks.sh g++-9 c++11
            ./target/build/test_app_benchmarks.sh g++-9 c++14
            ./target/build/test_app_benchmarks.sh g++-9 c++17
            ./target/build/test_app_benchmarks.sh g++-10 c++11
            ./target/build/test_app_benchmarks.sh g++-10 c++14
            ./target/build/test_app_benchmarks.sh g++-10 c++17
            ./target/build/test_app_benchmarks.sh g++-10 c++20
        working-directory: ./ref_app/
        shell: bash
  benchmark_tests-clang:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.commits[0].message, '[CI SKIP]')"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: update-tools
        run: sudo apt install clang clang-8 clang-9 clang-10
      - name: benchmark_tests_clang
        run: |
            ./target/build/test_app_benchmarks.sh clang++ c++11
            ./target/build/test_app_benchmarks.sh clang++-8 c++11
            ./target/build/test_app_benchmarks.sh clang++-8 c++14
            ./target/build/test_app_benchmarks.sh clang++-8 c++17
            ./target/build/test_app_benchmarks.sh clang++-9 c++11
            ./target/build/test_app_benchmarks.sh clang++-9 c++14
            ./target/build/test_app_benchmarks.sh clang++-9 c++17
            ./target/build/test_app_benchmarks.sh clang++-10 c++11
            ./target/build/test_app_benchmarks.sh clang++-10 c++14
            ./target/build/test_app_benchmarks.sh clang++-10 c++17
            ./target/build/test_app_benchmarks.sh clang++-10 c++20
        working-directory: ./ref_app/
        shell: bash
