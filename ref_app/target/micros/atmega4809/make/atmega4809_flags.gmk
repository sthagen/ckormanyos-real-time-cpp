#
#  Copyright Christopher Kormanyos 2007 - 2024.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)
#

# ------------------------------------------------------------------------------
# compiler flags for the target architecture
# ------------------------------------------------------------------------------

ifneq ($(MAKE),make)
GCC_VERSION   = 13.2.0
endif
GCC_TARGET    = avr
GCC_PREFIX    = avr

TGT_SUFFIX    = elf

TGT_ALLFLAGS  = -O2                                                               \
                -mmcu=atmega4809                                                  \
                -mrelax                                                           \
                -mdouble=32                                                       \
                -finline-functions                                                \
                -finline-limit=16                                                 \
                -fsigned-char                                                     \

ifeq ($(GCC_VERSION),13.2.0)
TGT_ALLFLAGS := $(TGT_ALLFLAGS)                                                   \
                -mdouble=32                                                       \
                -mlong-double=64
endif

TGT_CFLAGS    = -std=c99                                                          \
                $(TGT_ALLFLAGS)

TGT_CXXFLAGS  = -std=c++14                                                        \
                $(TGT_ALLFLAGS)

TGT_INCLUDES  = -I$(PATH_APP)/util/STL

TGT_AFLAGS    =

TGT_LDFLAGS   = -nostdlib                                                         \
                -nostartfiles                                                     \
                -Wl,--gc-sections                                                 \
                -Wl,-Map,$(APP).map                                               \
                -T $(LINKER_DEFINITION_FILE)

# echo Forcing reset using 1200bps open/close on port COM7
# c:\windows\system32\mode.com com7: baud=1200 dtr=on > NUL  1> NUL
# c:\windows\system32\mode.com com7: dtr=off > NUL  1> NUL
# C:\Users\User\Documents\Ks\uC_Software\Boards\real-time-cpp\ref_app\tools\AVR\avrdude\avrdude_7_1\avrdude.exe -CC:\Users\User\Documents\Ks\uC_Software\Boards\real-time-cpp\ref_app\tools\AVR\avrdude\6.3.0-arduino17\etc\avrdude.conf -v -e -patmega4809 -cjtag2updi -PCOM7 -b115200 -Uflash:w:C:\Users\User\Documents\Ks\uC_Software\Boards\real-time-cpp\ref_app\bin\ref_app.hex:i -Ufuse2:w:0x01:m -Ufuse5:w:0xC9:m -Ufuse8:w:0x00:m {upload.extra_files}

AVR_AVRDUDE_TOOL               = $(CURDIR)/$(PATH_TOOLS)/AVR/avrdude/avrdude-v7.2-windows-x64/avrdude.exe
AVR_AVRDUDE_CONF               = $(CURDIR)/$(PATH_TOOLS)/AVR/avrdude/avrdude-v7.2-windows-x64/avrdude.conf

AVR_AVRDUDE_FLAGS              = -C$(AVR_AVRDUDE_CONF)               \
                                 -v                                  \
                                 -e                                  \
                                 -patmega4809                        \
                                 -cjtag2updi                         \
                                 -PCOM7                              \
                                 -b115200                            \
                                 -Uflash:w:$(CURDIR)/$(APP).hex:i    \
                                 -Ufuse0:w:0x09:m                    \
                                 -Ufuse2:w:0x02:m                    \
                                 -Ufuse5:w:0xC8:m                    \
                                 -Ufuse6:w:0x04:m                    \
                                 -Ufuse8:w:0x00:m                    \
                                 {upload.extra_files}


AVR_AVRDUDE_FLAG_ECHO_PART1    = $(ECHO) echo Forcing reset using 1200bps open/close on port COM7             > $(CURDIR)/bin/flash.bat
AVR_AVRDUDE_FLAG_ECHO_PART2    = $(ECHO) c:\windows\system32\mode.com com7: baud=1200 dtr=on > NUL 1> NUL    >> $(CURDIR)/bin/flash.bat
AVR_AVRDUDE_FLAG_ECHO_PART3    = $(ECHO) c:\windows\system32\mode.com com7: dtr=off > NUL 1> NUL             >> $(CURDIR)/bin/flash.bat
AVR_AVRDUDE_FLAG_ECHO_PART4    = $(ECHO) $(subst /,\,$(AVR_AVRDUDE_TOOL)) $(subst /,\,$(AVR_AVRDUDE_FLAGS))  >> $(CURDIR)/bin/flash.bat


RULE_SPECIAL_MAKE_FLASH_BATCH :=    $(AVR_AVRDUDE_FLAG_ECHO_PART1) \
                                 && $(AVR_AVRDUDE_FLAG_ECHO_PART2) \
                                 && $(AVR_AVRDUDE_FLAG_ECHO_PART3) \
                                 && $(AVR_AVRDUDE_FLAG_ECHO_PART4)
