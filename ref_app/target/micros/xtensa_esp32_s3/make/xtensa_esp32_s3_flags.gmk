#
#  Copyright Christopher Kormanyos 2018 - 2025.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)
#

# ------------------------------------------------------------------------------
# compiler flags for the target architecture
# ------------------------------------------------------------------------------

GCC_VERSION   = 14.2.0
GCC_TARGET    = xtensa-esp32-elf
GCC_PREFIX    = xtensa-esp32s3-elf

TGT_SUFFIX    = elf

WARN_FLAGS   :=

include $(PATH_TGT_MAKE)/$(TGT)_flags_extra.gmk


TGT_ALLFLAGS  = -O1                                                               \
                $(MOST_O2_FLAGS)                                                  \
                $(SOME_O3_FLAGS)                                                  \
                -mabi=call0                                                       \
                -mno-text-section-literals                                        \
                -mstrict-align                                                    \
                -mlongcalls                                                       \
                -fomit-frame-pointer                                              \
                -fstrict-volatile-bitfields                                       \
                -fno-jump-tables                                                  \
                -fno-tree-switch-conversion                                       \
                -fno-stack-protector                                              \
                -nostdlib                                                         \
                -gdwarf-4                                                         \
                -DCONFIG_IDF_TARGET_ESP32S3                                       \
                -DI_KNOW_WHAT_I_AM_DOING


TGT_CFLAGS    = -std=c23                                                          \
                -nostdlib                                                         \
                $(TGT_ALLFLAGS)

TGT_CXXFLAGS  = -std=c++23                                                        \
                $(TGT_ALLFLAGS)

TGT_INCLUDES  =  -isystem $(PATH_APP)/util/STL

TGT_AFLAGS    =

TGT_LDFLAGS   = -nostartfiles                                                     \
                -nostdlib                                                         \
                -L$(PATH_TGT)/startup/Std/lib_call0_abi                           \
                -Wl,-Map,$(APP).map                                               \
                -T $(LINKER_DEFINITION_FILE)                                      \
                --specs=nano.specs                                                \
                --specs=nosys.specs


# ------------------------------------------------------------------------------
# Rule to assemble source file (*.S) to object file (*.o).
# ------------------------------------------------------------------------------

ifeq ($(TYP_OS),WIN)
TGT_GCC := $(PATH_TOOLS_CC)/$(GCC_PREFIX)-gcc.exe
TGT_GCC := $(subst /,\,$(TGT_GCC))
else
TGT_GCC := $(GCC_PREFIX)-gcc
endif

$(PATH_OBJ)/%.o : %.S
	@$(ECHO) +++ assemble for esp32s3: $< to $@
  # Assemble the source file,
  # ...and reformat (using sed) any possible error/warning messages
  #    for the VisualStudio(R) output window,
  # ...and create an assembly listing using objdump
	@-$(TGT_GCC) -O1 -fno-reorder-blocks-and-partition -fno-reorder-functions -mabi=call0 -mno-text-section-literals -mstrict-align -mlongcalls -fomit-frame-pointer -fstrict-volatile-bitfields -fno-jump-tables -fno-tree-switch-conversion -fno-stack-protector -DI_KNOW_WHAT_I_AM_DOING $(DEFS_IEEE754_SF) $(DEFS_LIB1FUNCS) $(C_INCLUDES) $< -c -o $(PATH_OBJ)/$(basename $(@F)).o 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(SED) -e 's|:\([0-9]*\):|(\1) :|' $(PATH_ERR)/$(basename $(@F)).err
	@-$(OBJDUMP) -S $(PATH_OBJ)/$(basename $(@F)).o > $(PATH_LST)/$(basename $(@F)).lst


# ------------------------------------------------------------------------------
# Image file and flash batch file.
# ------------------------------------------------------------------------------

RULE_SPECIAL_MAKE_IMAGE_FILE :=

ifeq ($(TYP_OS),WIN)

ESP32S3_ESP_TOOL             := $(PATH_TOOLS)/espressif/esp32/tools/esptool-v4.8.1-win64/esptool-win64/esptool.exe

ESP32S3_ESP_TOOL_FLAGS_IMAG  := --chip esp32s3                                \
                                elf2image                                     \
                                --flash_mode dio                              \
                                --flash_freq 80m                              \
                                --flash_size 2MB                              \
                                --min-rev-full 0                              \
                                --max-rev-full 99                             \
                                -o $(basename $(APP).$(TGT_SUFFIX)).bin       \
                                $(APP).$(TGT_SUFFIX)


ESP32S3_ESP_TOOL_FLAGS_PROG      := --chip esp32s3                                \
                                    write_flash                                   \
                                    --flash_mode dio                              \
                                    --flash_freq 80m                              \
                                    --flash_size 2MB 0                            \
                                    $(notdir $(APP)).bin


RULE_SPECIAL_MAKE_IMAGE_FILE     :=    $(ECHO) +++ generate image file: $(basename $(APP).$(TGT_SUFFIX)).bin                         \
                                    && $(subst /,\,$(ESP32S3_ESP_TOOL)) $(subst /,\,$(ESP32S3_ESP_TOOL_FLAGS_IMAG))


ESP32S3_ESP_TOOL_CMD_COPY_PART2  := copy /Y $(subst /,\\,$(ESP32S3_ESP_TOOL)) $(subst /,\,$(CURDIR)/bin) > 2 > NUL
ESP32S3_ESP_TOOL_CMD_ECHO        := $(ECHO) esptool.exe $(subst /,\,$(ESP32S3_ESP_TOOL_FLAGS_PROG)) > $(subst /,\,$(CURDIR)/bin/flash.bat)


RULE_SPECIAL_MAKE_FLASH_BATCH    :=    $(ESP32S3_ESP_TOOL_CMD_COPY_PART2)         \
                                    && $(ESP32S3_ESP_TOOL_CMD_ECHO)

endif
